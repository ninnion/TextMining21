{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 830,
     "status": "ok",
     "timestamp": 1624299345265,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "hcPaaWwoxbQv",
    "outputId": "fe5f3665-359a-4f35-97f2-68a51c328740"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /Users/yonas/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to /Users/yonas/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tqdm.auto import tqdm\n",
    "import nltk\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.tokenize import word_tokenize\n",
    "import pandas as pd\n",
    "import string\n",
    "import re\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import model_selection, naive_bayes, svm\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "import numpy as np\n",
    "from nltk import pos_tag\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from collections import defaultdict\n",
    "from nltk.corpus import wordnet as wn\n",
    "from sklearn.metrics import accuracy_score, precision_recall_fscore_support, classification_report\n",
    "from sklearn.svm import SVC\n",
    "from sklearn import metrics\n",
    "\n",
    "nltk.download('stopwords')\n",
    "nltk.download('wordnet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 21987,
     "status": "ok",
     "timestamp": 1624299186388,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "zhUWPArTxkda",
    "outputId": "032bfcd9-64d4-4aae-fc56-7696b09ffc95"
   },
   "outputs": [],
   "source": [
    "#from google.colab import drive\n",
    "\n",
    "# Mounting Drive inside the Colab notebook\n",
    "#drive.mount('/content/drive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {
    "executionInfo": {
     "elapsed": 900,
     "status": "ok",
     "timestamp": 1624299830006,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "sZgr_26KxbQw"
   },
   "outputs": [],
   "source": [
    "#df1 = pd.read_csv(\"/Users/julianalexander/Library/Mobile Documents/com~apple~CloudDocs/HSG/1. Semester MBI FS2021/8,049,1.00 Text Mining mit Python/TextMining21/Reddit_Julian_TOTAL-klassifiziert.csv\")\n",
    "#df2 = pd.read_csv(\"/Users/julianalexander/Library/Mobile Documents/com~apple~CloudDocs/HSG/1. Semester MBI FS2021/8,049,1.00 Text Mining mit Python/TextMining21/Reddit_Marek_klassifiziert.csv\")\n",
    "#df3 = pd.read_csv(\"/Users/julianalexander/Library/Mobile Documents/com~apple~CloudDocs/HSG/1. Semester MBI FS2021/8,049,1.00 Text Mining mit Python/TextMining21/Reddit_Yonas_Total_Klassifiziert.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"/Users/yonas/Desktop/GitHub/Text-Mining/TextMining21/Reddit_Julian_TOTAL-klassifiziert.csv\")\n",
    "df2 = pd.read_csv(\"/Users/yonas/Desktop/GitHub/Text-Mining/TextMining21/Reddit_Marek_klassifiziert.csv\")\n",
    "df3 = pd.read_csv(\"/Users/yonas/Desktop/GitHub/Text-Mining/TextMining21/Reddit_Yonas_Total_Klassifiziert.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {
    "executionInfo": {
     "elapsed": 8,
     "status": "ok",
     "timestamp": 1624299831720,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "SyjYJzi1xbQy"
   },
   "outputs": [],
   "source": [
    "Atweets = pd.concat([df1, df2, df3], axis=0, join='inner')\n",
    "Atweets = Atweets.sort_values(by='index')\n",
    "Atweets = Atweets.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Preprocessing**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "S5UNhnkLxbQz"
   },
   "source": [
    "Punktuierung"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1624299832718,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "ccz_YSWbxbQz"
   },
   "outputs": [],
   "source": [
    "def remove_punctuation(txt):\n",
    "    txt_nopunt = \"\".join([c for c in txt if c not in string.punctuation])\n",
    "    return txt_nopunt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "executionInfo": {
     "elapsed": 314,
     "status": "ok",
     "timestamp": 1624299833723,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "4VKJbe9ExbQ0"
   },
   "outputs": [],
   "source": [
    "Atweets[\"submission\"] = Atweets[\"submission\"].apply(lambda x: remove_punctuation(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tvzH3h18xbQ0"
   },
   "source": [
    "Tokenisierung"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {
    "executionInfo": {
     "elapsed": 10,
     "status": "ok",
     "timestamp": 1624299834889,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "x3uLIYehxbQ1"
   },
   "outputs": [],
   "source": [
    "def tokenize(txt):\n",
    "    tokens = re.split(\"\\W+\", txt)\n",
    "    return tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {
    "executionInfo": {
     "elapsed": 6,
     "status": "ok",
     "timestamp": 1624299835451,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "OaSiGvjrxbQ1"
   },
   "outputs": [],
   "source": [
    "Atweets[\"submissions_tokenized\"] = Atweets[\"submission\"].apply(lambda x: tokenize(x.lower()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "xfpv9cOwxbQ1"
   },
   "source": [
    "Stopw√∂rter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {
    "executionInfo": {
     "elapsed": 515,
     "status": "ok",
     "timestamp": 1624299836400,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "z1OdZPvmxbQ3"
   },
   "outputs": [],
   "source": [
    "stopwords = nltk.corpus.stopwords.words(\"english\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {
    "executionInfo": {
     "elapsed": 368,
     "status": "ok",
     "timestamp": 1624299836756,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "0CE53d7AxbQ5"
   },
   "outputs": [],
   "source": [
    "stopwords.append(\"ll\")\n",
    "stopwords.append(\"im\")\n",
    "stopwords.append(\"youre\")\n",
    "stopwords.append(\"youve\")\n",
    "stopwords.append(\"youll\")\n",
    "stopwords.append(\"youd\")\n",
    "stopwords.append(\"shes\")\n",
    "stopwords.append(\"its\")\n",
    "stopwords.append(\"thatll\")\n",
    "stopwords.append(\"dont\")\n",
    "stopwords.append(\"shouldve\")\n",
    "stopwords.append(\"arent\")\n",
    "stopwords.append(\"couldnt\")\n",
    "stopwords.append(\"didnt\")\n",
    "stopwords.append(\"doesnt\")\n",
    "stopwords.append(\"hadnt\")\n",
    "stopwords.append(\"havent\")\n",
    "stopwords.append(\"isnt\")\n",
    "stopwords.append(\"mightnt\")\n",
    "stopwords.append(\"neednt\")\n",
    "stopwords.append(\"shant\")\n",
    "stopwords.append(\"shouldnt\")\n",
    "stopwords.append(\"wasnt\")\n",
    "stopwords.append(\"werent\")\n",
    "stopwords.append(\"wont\")\n",
    "stopwords.append(\"wouldnt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {
    "executionInfo": {
     "elapsed": 4,
     "status": "ok",
     "timestamp": 1624299838938,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "Bd7A75wCxbQ6"
   },
   "outputs": [],
   "source": [
    "def remove_stopwords(txt_tokenized):\n",
    "    txt_clean = [word for word in txt_tokenized if word not in stopwords]\n",
    "    return txt_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {
    "executionInfo": {
     "elapsed": 833,
     "status": "ok",
     "timestamp": 1624299840131,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "y4N-fYXcxbQ7"
   },
   "outputs": [],
   "source": [
    "Atweets[\"submission_no_stopwords\"] = Atweets[\"submissions_tokenized\"].apply(lambda x: remove_stopwords(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6OAJ6lpPxbQ7"
   },
   "source": [
    "Stemming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {
    "executionInfo": {
     "elapsed": 30,
     "status": "ok",
     "timestamp": 1624299840131,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "B8Gp8pyoxbQ8"
   },
   "outputs": [],
   "source": [
    "ps = PorterStemmer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {
    "executionInfo": {
     "elapsed": 11,
     "status": "ok",
     "timestamp": 1624299840431,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "V-Ascxc8xbQ8"
   },
   "outputs": [],
   "source": [
    "def stemming(tokenized_text):\n",
    "    text = [ps.stem(word) for word in tokenized_text]\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {
    "executionInfo": {
     "elapsed": 3936,
     "status": "ok",
     "timestamp": 1624299845015,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "TEaezJeIxbQ8"
   },
   "outputs": [],
   "source": [
    "Atweets[\"submission_stemmed\"] = Atweets[\"submission_no_stopwords\"].apply(lambda x: stemming(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Gp4OG0rQxbQ8"
   },
   "source": [
    "Lemmatisierung"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1624299845016,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "WhnmEOx9xbQ8"
   },
   "outputs": [],
   "source": [
    "wn = nltk.WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {
    "executionInfo": {
     "elapsed": 12,
     "status": "ok",
     "timestamp": 1624299845016,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "4gLtR6WNxbQ9"
   },
   "outputs": [],
   "source": [
    "def lemmatization(token_txt):\n",
    "    text = [wn.lemmatize(word) for word in token_txt]\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {
    "executionInfo": {
     "elapsed": 486,
     "status": "ok",
     "timestamp": 1624299845862,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "CPBbTpwbxbQ9"
   },
   "outputs": [],
   "source": [
    "Atweets[\"submission_lemmatized\"] = Atweets[\"submission_no_stopwords\"].apply(lambda x: lemmatization(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classifier & Feature Extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A. Train & Test-Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "executionInfo": {
     "elapsed": 1879,
     "status": "ok",
     "timestamp": 1624301311219,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "p4EtSJCA4djZ"
   },
   "outputs": [],
   "source": [
    "Atweets[\"submission_cleaned\"] = \" \"\n",
    "\n",
    "for i in range(0, len(Atweets) - 1):\n",
    "  Atweets.loc[i,\"submission_cleaned\"] = \" \".join(Atweets.loc[i,\"submission_stemmed\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {
    "executionInfo": {
     "elapsed": 251,
     "status": "ok",
     "timestamp": 1624301338199,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "exxDjF0uxbQ-"
   },
   "outputs": [],
   "source": [
    "Corpus = Atweets.loc[:, \"submission_cleaned\"].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1624301339715,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "B2KPJAfixbQ-"
   },
   "outputs": [],
   "source": [
    "Train_X, Test_X, Train_Y, Test_Y = model_selection.train_test_split(Corpus,Atweets['sentiment'],test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {
    "executionInfo": {
     "elapsed": 292,
     "status": "ok",
     "timestamp": 1624301342508,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "VCTTeDm-0na8"
   },
   "outputs": [],
   "source": [
    "Train_Y_1 = Train_Y\n",
    "Test_Y_1 = Test_Y\n",
    "\n",
    "Train_Y_2 = Train_Y\n",
    "Test_Y_2 = Test_Y\n",
    "\n",
    "Train_Y_1 = np.where(Train_Y_1 == 1.0, 0, Train_Y_1)\n",
    "Train_Y_1 = np.where(Train_Y_1 == 2.0, 0, Train_Y_1)\n",
    "Train_Y_1 = np.where(Train_Y_1 == 3.0, 1, Train_Y_1)\n",
    "Train_Y_1 = np.where(Train_Y_1 == 4.0, 0, Train_Y_1)\n",
    "Train_Y_1 = np.where(Train_Y_1 == 5.0, 0, Train_Y_1)\n",
    "\n",
    "Train_Y_2 = np.where(Train_Y_2 == 1.0, 1, Train_Y_2)\n",
    "Train_Y_2 = np.where(Train_Y_2 == 2.0, 1, Train_Y_2)\n",
    "Train_Y_2 = np.where(Train_Y_2 == 3.0, 2, Train_Y_2)\n",
    "Train_Y_2 = np.where(Train_Y_2 == 4.0, 3, Train_Y_2)\n",
    "Train_Y_2 = np.where(Train_Y_2 == 5.0, 3, Train_Y_2)\n",
    "\n",
    "\n",
    "Test_Y_1 = np.where(Test_Y_1 == 1.0, 0, Test_Y_1)\n",
    "Test_Y_1 = np.where(Test_Y_1 == 2.0, 0, Test_Y_1)\n",
    "Test_Y_1 = np.where(Test_Y_1 == 3.0, 1, Test_Y_1)\n",
    "Test_Y_1 = np.where(Test_Y_1 == 4.0, 0, Test_Y_1)\n",
    "Test_Y_1 = np.where(Test_Y_1 == 5.0, 0, Test_Y_1)\n",
    "\n",
    "Test_Y_2 = np.where(Test_Y_2 == 1.0, 1, Test_Y_2)\n",
    "Test_Y_2 = np.where(Test_Y_2 == 2.0, 1, Test_Y_2)\n",
    "Test_Y_2 = np.where(Test_Y_2 == 3.0, 2, Test_Y_2)\n",
    "Test_Y_2 = np.where(Test_Y_2 == 4.0, 3, Test_Y_2)\n",
    "Test_Y_2 = np.where(Test_Y_2 == 5.0, 3, Test_Y_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## B. Feature Extraction: TF-IDF-Vectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {
    "executionInfo": {
     "elapsed": 589,
     "status": "ok",
     "timestamp": 1624301345433,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "--IOQjAhxbQ-"
   },
   "outputs": [],
   "source": [
    "Tfidf_vect = TfidfVectorizer(max_features=12842)\n",
    "Tfidf_vect.fit(Corpus)\n",
    "Train_X_Tfidf = Tfidf_vect.transform(Train_X)\n",
    "Test_X_Tfidf = Tfidf_vect.transform(Test_X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## B.1. Naive Bayes Classifier (MultinomialNB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 236,
     "status": "ok",
     "timestamp": 1624301348340,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "_atgmL1XxbQ_",
    "outputId": "bb702df7-46ab-4c09-b56e-c443bf1c8359"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Bayes Accuracy Score ->  72.71214642262895\n"
     ]
    }
   ],
   "source": [
    "# fit the training dataset on the NB classifier\n",
    "Naive = naive_bayes.MultinomialNB()\n",
    "Naive.fit(Train_X_Tfidf,Train_Y_2)\n",
    "# predict the labels on validation dataset\n",
    "predictions_NB = Naive.predict(Test_X_Tfidf)\n",
    "# Use accuracy_score function to get the accuracy\n",
    "print(\"Naive Bayes Accuracy Score -> \",accuracy_score(predictions_NB, Test_Y_2)*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ORKdkHBTxbQ_"
   },
   "source": [
    "**Precision, Recall & F-score**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 235,
     "status": "ok",
     "timestamp": 1624301350542,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "F9EMfI5hxbQ_",
    "outputId": "23d9c77b-83b7-47eb-919d-b37df3237900"
   },
   "outputs": [],
   "source": [
    "# precision_recall_fscore_support(predictions_NB, Test_Y_2, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naives Bayes Precision Score: 100.00%\n",
      "Naives Bayes Recall Score: 72.71%\n",
      "Naives Bayes F-Score Score: 84.20%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1248: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "mnb_scores = precision_recall_fscore_support(predictions_NB, Test_Y_2, average='weighted')\n",
    "print(f'Naives Bayes Precision Score: {mnb_scores[0]*100:.2f}%')\n",
    "print(f'Naives Bayes Recall Score: {mnb_scores[1]*100:.2f}%')\n",
    "print(f'Naives Bayes F-Score Score: {mnb_scores[2]*100:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Naive Bayes Predictions - Confusion Matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 516
    },
    "executionInfo": {
     "elapsed": 605,
     "status": "ok",
     "timestamp": 1624300388667,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "agpzZeu4xbRA",
    "outputId": "00046191-e5e4-4f8d-afa0-5603537c464c"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "# import matplotlib data visualization library\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# determine the prediction confusion matrix\n",
    "mat = confusion_matrix(Test_Y_2, predictions_NB)\n",
    "\n",
    "# init the plot\n",
    "plt.figure(figsize=(8, 8))\n",
    "\n",
    "# plot confusion matrix heatmap\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, cmap='BuGn_r')\n",
    "\n",
    "# add plot axis labels\n",
    "plt.xlabel('[true class label $y_{i}$]')\n",
    "plt.ylabel('[predicted class label $y_{i}\\'$]')\n",
    "plt.tick_params(axis='both', which='major', labelsize=8, labelbottom = False, bottom=False, top = False, left = False, labeltop=True)\n",
    "\n",
    "# add plot title\n",
    "plt.title('Naive Bayes Predictions - Confusion Matrix');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oRpcVjLDxbRB"
   },
   "source": [
    "## B.2. Support Vector Machines Classifier (SVM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2246,
     "status": "ok",
     "timestamp": 1624301422040,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "1LkVJYr4xbRB",
    "outputId": "d48c966d-3d0f-4d8f-c54e-13089c03be26"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy Score: 73.54%\n"
     ]
    }
   ],
   "source": [
    "# Classifier - Algorithm - SVM\n",
    "# fit the training dataset on the classifier\n",
    "SVM = SVC(C=1.0, kernel='linear', degree=3, gamma='auto')\n",
    "SVM.fit(Train_X_Tfidf,Train_Y_2)\n",
    "# predict the labels on validation dataset\n",
    "predictions_SVM = SVM.predict(Test_X_Tfidf)\n",
    "# Use accuracy_score function to get the accuracy\n",
    "# print(\"SVM Accuracy Score -> \",accuracy_score(predictions_SVM, Test_Y_2)*100)\n",
    "SVM_accuracy = accuracy_score(predictions_SVM, Test_Y_2)*100\n",
    "print(f'SVM Accuracy Score: {SVM_accuracy:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Precision, Recall & F-score**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "# precision_recall_fscore_support(predictions_SVM, Test_Y_2, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Precision Score: 95.84%\n",
      "SVM Recall Score: 75.37%\n",
      "SVM F-Score Score: 83.84%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1248: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "svm_scores = precision_recall_fscore_support(predictions_SVM, Test_Y_2, average='weighted')\n",
    "print(f'SVM Precision Score: {x[0]*100:.2f}%')\n",
    "print(f'SVM Recall Score: {x[1]*100:.2f}%')\n",
    "print(f'SVM F-Score Score: {x[2]*100:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SVM Predictions - Confusion Matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 516
    },
    "executionInfo": {
     "elapsed": 625,
     "status": "ok",
     "timestamp": 1624301426645,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "SNfEVjKJxbRB",
    "outputId": "2086964a-3e87-49ca-9b46-39aea9cf56b6"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# import matplotlib data visualization library\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# determine the prediction confusion matrix\n",
    "mat = confusion_matrix(Test_Y_2, predictions_SVM)\n",
    "\n",
    "# init the plot\n",
    "plt.figure(figsize=(8, 8))\n",
    "\n",
    "\n",
    "# plot confusion matrix heatmap\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, cmap='BuGn_r')\n",
    "\n",
    "# add plot axis labels\n",
    "plt.xlabel('[true class label $y_{i}$]')\n",
    "plt.ylabel('[predicted class label $y_{i}\\'$]')\n",
    "plt.tick_params(axis='both', which='major', labelsize=8, labelbottom = False, bottom=False, top = False, left = False, labeltop=True)\n",
    "\n",
    "# add plot title\n",
    "plt.title('SVM Predictions - Confusion Matrix');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DZFjA5GI2_M4"
   },
   "source": [
    "## C. Feature Extraction: CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {
    "executionInfo": {
     "elapsed": 242,
     "status": "ok",
     "timestamp": 1624301434056,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "85WsGGmF2oiD"
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "import nltk\n",
    "vectorizer = CountVectorizer(min_df = 0.05, stop_words='english', ngram_range = (1,1))\n",
    "X = vectorizer.fit_transform(Corpus)\n",
    "\n",
    "X = X.toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## C.1. Support Vector Machines Classifier (SVM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 1364,
     "status": "ok",
     "timestamp": 1624301437668,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "BiZDyU0EByaf",
    "outputId": "4eba2619-5a88-43b5-fa52-43580f78a4ae"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model classification accuracy: 67.55%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn import metrics\n",
    "\n",
    "# Creating an obect containing parametrisation setup for SVM \n",
    "svm = SVC(kernel='poly', degree = 2, C=100, random_state=1234)\n",
    "\n",
    "vectorizer.fit(Corpus)\n",
    "Train_X_count = vectorizer.transform(Train_X)\n",
    "Test_X_count = vectorizer.transform(Test_X)\n",
    "\n",
    "# Training an SVM model with parameters set in the previous  step\n",
    "svm.fit(Train_X_count, Train_Y_2)\n",
    "\n",
    "# Calculating model predictions on evaluation data\n",
    "y_pred = svm.predict(Test_X_count)\n",
    "\n",
    "# Accuracy on evaluation data\n",
    "eval_accuracy = metrics.accuracy_score(Test_Y_2, y_pred) * 100\n",
    "print(f'Model classification accuracy: {eval_accuracy:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Precision, Recall & F-score**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "# precision_recall_fscore_support(Test_Y_2, y_pred, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Precision Score: 62.37%\n",
      "SVM Recall Score: 67.55%\n",
      "SVM F-Score Score: 64.32%\n"
     ]
    }
   ],
   "source": [
    "svm_scores_2 = precision_recall_fscore_support(Test_Y_2, y_pred, average='weighted')\n",
    "print(f'SVM Precision Score: {svm_scores_2[0]*100:.2f}%')\n",
    "print(f'SVM Recall Score: {svm_scores_2[1]*100:.2f}%')\n",
    "print(f'SVM F-Score Score: {svm_scores_2[2]*100:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SVM Predictions - Confusion Matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 516
    },
    "executionInfo": {
     "elapsed": 815,
     "status": "ok",
     "timestamp": 1624301444130,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "ZqvUOAVyKjcU",
    "outputId": "04fb4d94-7c7c-472d-e22e-88644a1e223e"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# import matplotlib data visualization library\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# determine the prediction confusion matrix\n",
    "mat = confusion_matrix(Test_Y_2, y_pred)\n",
    "\n",
    "# init the plot\n",
    "plt.figure(figsize=(8, 8))\n",
    "\n",
    "# plot confusion matrix heatmap\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, cmap='BuGn_r')\n",
    "\n",
    "# add plot axis labels\n",
    "plt.xlabel('[true class label $y_{i}$]')\n",
    "plt.ylabel('[predicted class label $y_{i}\\'$]')\n",
    "plt.tick_params(axis='both', which='major', labelsize=8, labelbottom = False, bottom=False, top = False, left = False, labeltop=True)\n",
    "\n",
    "# add plot title\n",
    "plt.title('SVM Predictions - Confusion Matrix');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wSpumbD86YTY"
   },
   "source": [
    "# D. Hierarchical Classification (1. Naive Bayes, 2. SVM)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## D.1. First-Classification in Neutral/Non-Neutral with Naive Bayes (MultinomialNB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 245,
     "status": "ok",
     "timestamp": 1624301882902,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "aPXuA3jQ72um",
    "outputId": "f9c6c565-a52a-41dd-e886-13f9546bcdad"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naive Bayes Accuracy Score ->  72.71214642262895\n"
     ]
    }
   ],
   "source": [
    "# fit the training dataset on the NB classifier\n",
    "Naive = naive_bayes.MultinomialNB()\n",
    "Naive.fit(Train_X_Tfidf,Train_Y_1)\n",
    "# predict the labels on validation dataset\n",
    "predictions_NB = Naive.predict(Test_X_Tfidf)\n",
    "# Use accuracy_score function to get the accuracy\n",
    "print(\"Naive Bayes Accuracy Score -> \",accuracy_score(predictions_NB, Test_Y_1)*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "h1cjcKpS72u0"
   },
   "source": [
    "**Precision, Recall & F-score**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [],
   "source": [
    "# precision_recall_fscore_support(predictions_NB, Test_Y_1, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 285,
     "status": "ok",
     "timestamp": 1624301894962,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "koKAo3FJ72u1",
    "outputId": "732325e0-5c72-4776-c316-d0dac940ffb9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Naives Bayes Precision Score: 100.00%\n",
      "Naives Bayes Recall Score: 72.71%\n",
      "Naives Bayes F-Score Score: 84.20%\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1248: UndefinedMetricWarning: Recall and F-score are ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    }
   ],
   "source": [
    "mnb_scores_2 = precision_recall_fscore_support(predictions_NB, Test_Y_1, average='weighted')\n",
    "print(f'Naives Bayes Precision Score: {mnb_scores_2[0]*100:.2f}%')\n",
    "print(f'Naives Bayes Recall Score: {mnb_scores_2[1]*100:.2f}%')\n",
    "print(f'Naives Bayes F-Score Score: {mnb_scores_2[2]*100:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Naive Bayes Predictions - Confusion Matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 516
    },
    "executionInfo": {
     "elapsed": 741,
     "status": "ok",
     "timestamp": 1624301903230,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "GvCEsvQF72u1",
    "outputId": "a8661572-bee1-477e-fdbc-83a290180a91"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "# import matplotlib data visualization library\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# determine the prediction confusion matrix\n",
    "mat = confusion_matrix(Test_Y_1, predictions_NB)\n",
    "\n",
    "# init the plot\n",
    "plt.figure(figsize=(8, 8))\n",
    "\n",
    "# plot confusion matrix heatmap\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, cmap='BuGn_r')\n",
    "\n",
    "# add plot axis labels\n",
    "plt.xlabel('[true class label $y_{i}$]')\n",
    "plt.ylabel('[predicted class label $y_{i}\\'$]')\n",
    "plt.tick_params(axis='both', which='major', labelsize=8, labelbottom = False, bottom=False, top = False, left = False, labeltop=True)\n",
    "\n",
    "# add plot title\n",
    "plt.title('Naive Bayes Predictions - Confusion Matrix');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## D.2. Hierarchical Classification 1: Neutral/Non-Neutral with Support Vector Machines (SVM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2121,
     "status": "ok",
     "timestamp": 1624302417434,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "g-ABM6XR8LO8",
    "outputId": "be19191d-f4e3-4c88-9802-14175df0287e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy Score ->  69.7171381031614\n"
     ]
    }
   ],
   "source": [
    "# Classifier - Algorithm - SVM\n",
    "# fit the training dataset on the classifier\n",
    "SVM_hierarchical_1 = SVC(C=100, kernel='linear', degree=3, gamma='auto')\n",
    "SVM_hierarchical_1.fit(Train_X_Tfidf,Train_Y_1)\n",
    "# predict the labels on validation dataset\n",
    "predictions_SVM = SVM_hierarchical_1.predict(Test_X_Tfidf)\n",
    "# Use accuracy_score function to get the accuracy\n",
    "print(\"SVM Accuracy Score -> \",accuracy_score(predictions_SVM, Test_Y_1)*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Precision, Recall & F-score**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [],
   "source": [
    "# precision_recall_fscore_support(predictions_SVM, Test_Y_1, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Precision Score: 73.61%\n",
      "SVM Recall Score: 73.61%\n",
      "SVM F-Score Score: 73.61%\n"
     ]
    }
   ],
   "source": [
    "svm_scores_3 = precision_recall_fscore_support(predictions_SVM, Test_Y_1, average='weighted')\n",
    "print(f'SVM Precision Score: {svm_scores_3[0]*100:.2f}%')\n",
    "print(f'SVM Recall Score: {svm_scores_3[0]*100:.2f}%')\n",
    "print(f'SVM F-Score Score: {svm_scores_3[0]*100:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SVM Predictions - Confusion Matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 516
    },
    "executionInfo": {
     "elapsed": 697,
     "status": "ok",
     "timestamp": 1624302423267,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "VHn1GvJg8LPM",
    "outputId": "3d87af25-9d6a-44d4-d89b-a77fc8a57bc1"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# import matplotlib data visualization library\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# determine the prediction confusion matrix\n",
    "mat = confusion_matrix(Test_Y_1, predictions_SVM)\n",
    "\n",
    "# init the plot\n",
    "plt.figure(figsize=(8, 8))\n",
    "\n",
    "\n",
    "# plot confusion matrix heatmap\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, cmap='BuGn_r')\n",
    "\n",
    "# add plot axis labels\n",
    "plt.xlabel('[true class label $y_{i}$]')\n",
    "plt.ylabel('[predicted class label $y_{i}\\'$]')\n",
    "plt.tick_params(axis='both', which='major', labelsize=8, labelbottom = False, bottom=False, top = False, left = False, labeltop=True)\n",
    "\n",
    "# add plot title\n",
    "plt.title('SVM Predictions - Confusion Matrix');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## D.3. Hierarchical Classification 2: Positive/Negative with Support Vector Machines (SVM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {
    "executionInfo": {
     "elapsed": 249,
     "status": "ok",
     "timestamp": 1624303039176,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "07zB5CVk-5to"
   },
   "outputs": [],
   "source": [
    "indices_train = Train_Y_2 != 2\n",
    "indices_test = Test_Y_2 != 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {
    "executionInfo": {
     "elapsed": 241,
     "status": "ok",
     "timestamp": 1624303132068,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "Z_RjfW1X_Ks7"
   },
   "outputs": [],
   "source": [
    "Train_Y_2 = Train_Y_2[indices_train]\n",
    "Train_X = Train_X[indices_train]\n",
    "\n",
    "Test_Y_2 = Test_Y_2[indices_test]\n",
    "Test_X = Test_X[indices_test]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 254,
     "status": "ok",
     "timestamp": 1624303620060,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "jcKC0Sw1BfkQ",
    "outputId": "f4e14031-e995-4958-a523-90e61b8b4eaa"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Accuracy Score ->  57.92682926829268\n"
     ]
    }
   ],
   "source": [
    "# Classifier - Algorithm - SVM\n",
    "# fit the training dataset on the classifier\n",
    "SVM_hierarchical_2 = SVC(C=1000, kernel='poly', degree=3, gamma='auto')\n",
    "\n",
    "Train_X_count = vectorizer.transform(Train_X)\n",
    "Test_X_count = vectorizer.transform(Test_X)\n",
    "\n",
    "SVM_hierarchical_2.fit(Train_X_count,Train_Y_2)\n",
    "# predict the labels on validation dataset\n",
    "predictions_SVM = SVM_hierarchical_2.predict(Test_X_count)\n",
    "# Use accuracy_score function to get the accuracy\n",
    "print(\"SVM Accuracy Score -> \",accuracy_score(predictions_SVM, Test_Y_2)*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Precision, Recall & F-score**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.7916261635442441, 0.5792682926829268, 0.6435327563124288, None)"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# precision_recall_fscore_support(predictions_SVM, Test_Y_2, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM Precision Score: 79.16%\n",
      "SVM Recall Score: 57.93%\n",
      "SVM F-Score Score: 64.35%\n"
     ]
    }
   ],
   "source": [
    "svm_scores_4 = precision_recall_fscore_support(predictions_SVM, Test_Y_2, average='weighted')\n",
    "print(f'SVM Precision Score: {svm_scores_4[0]*100:.2f}%')\n",
    "print(f'SVM Recall Score: {svm_scores_4[1]*100:.2f}%')\n",
    "print(f'SVM F-Score Score: {svm_scores_4[2]*100:.2f}%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SVM Predictions - Confusion Matrix**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 516
    },
    "executionInfo": {
     "elapsed": 487,
     "status": "ok",
     "timestamp": 1624303622873,
     "user": {
      "displayName": "Aa Bb",
      "photoUrl": "https://lh3.googleusercontent.com/a-/AOh14GgxTwlWxf1ISkjEb1iiMdFk7b1T9SqsvitEu42Q=s64",
      "userId": "00247581621828842951"
     },
     "user_tz": -120
    },
    "id": "ggN8hQfOBfkR",
    "outputId": "773d8ef8-12ca-4f47-b331-5f251dbb5e15"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# determine the prediction confusion matrix\n",
    "mat = confusion_matrix(Test_Y_2, predictions_SVM)\n",
    "\n",
    "# init the plot\n",
    "plt.figure(figsize=(8, 8))\n",
    "\n",
    "# plot confusion matrix heatmap\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, cmap='BuGn_r')\n",
    "\n",
    "# add plot axis labels\n",
    "plt.xlabel('[true class label $y_{i}$]')\n",
    "plt.ylabel('[predicted class label $y_{i}\\'$]')\n",
    "plt.tick_params(axis='both', which='major', labelsize=8, labelbottom = False, bottom=False, top = False, left = False, labeltop=True)\n",
    "\n",
    "# add plot title\n",
    "plt.title('SVM Predictions - Confusion Matrix');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "TextMining_3.0.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
